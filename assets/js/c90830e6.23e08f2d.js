"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[1830],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>s});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),s=o,g=m["".concat(d,".").concat(s)]||m[s]||u[s]||r;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function s(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={},l="doom.core.doc_gen",i={unversionedId:"modules/core/doc_gen",id:"modules/core/doc_gen",title:"doom.core.doc_gen",description:"Internal module for generating doom-nvim documentation.",source:"@site/docs/modules/core/doc_gen.md",sourceDirName:"modules/core",slug:"/modules/core/doc_gen",permalink:"/docs/modules/core/doc_gen",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"YAML",permalink:"/docs/modules/langs/yaml"},next:{title:"nest",permalink:"/docs/modules/core/nest"}},d={},c=[{value:"Settings",id:"settings",level:2},{value:"Plugins/Packages",id:"pluginspackages",level:2},{value:"Keybinds",id:"keybinds",level:2},{value:"Commands",id:"commands",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"doomcoredoc_gen"},(0,o.kt)("inlineCode",{parentName:"h1"},"doom.core.doc_gen")),(0,o.kt)("p",null,"Internal module for generating doom-nvim documentation."),(0,o.kt)("p",null,"Most of the parsing and helpdoc generation logic is handled by mini.doc.\nThe markdown - support is added by patching and overriding the default\nbehaviour."),(0,o.kt)("p",null,'Although this is a "core" module it is not enabled by default.  To enable it\nyou must add the ',(0,o.kt)("inlineCode",{parentName:"p"},"core")," field to your ",(0,o.kt)("inlineCode",{parentName:"p"},"modules.lua")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- modules.lua\nreturn {\n  core = {\n    "required", -- Must include all other core modules\n    "nest",\n    "reloader",\n    "treesitter",\n    "updater",\n    "doc_gen", -- Add "doc_gen" module\n  }\n}\n')),(0,o.kt)("h2",{id:"settings"},"Settings"),(0,o.kt)("p",null,"Settings for the doc_gen module."),(0,o.kt)("p",null,"You can access and override these values in your ",(0,o.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local doc_gen_settings = doom.core.doc_gen.settings\ndoc_gen_settings.<field> = <new_value>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"doc_gen.settings = {\n  --The desired output format, this will configure mini\n  --@type 'helpdoc'|'markdown'\n  --@default 'helpdoc'\n  output_format = \"helpdoc\",\n\n  -- Destination for generated output\n  -- @type string|nil\n  -- @default nil\n  website_folder = nil,\n}\n")),(0,o.kt)("h2",{id:"pluginspackages"},"Plugins/Packages"),(0,o.kt)("p",null,"Plugins for the ",(0,o.kt)("inlineCode",{parentName:"p"},"doom.core.doc_gen")," module."),(0,o.kt)("p",null,"These plugins will be passed into packer.nvim on startup.  You can tweak\nthe packer options by accessing these values in your ",(0,o.kt)("inlineCode",{parentName:"p"},"config.lua")," file.\ni.e.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local doc_gen_packages = doom.core.doc_gen.packages\ndoc_gen_packages['mini_doc'].commit = '<my_new_commit_sha>'\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Key"),(0,o.kt)("th",{parentName:"tr",align:null},"Source"),(0,o.kt)("th",{parentName:"tr",align:null},"Commit"),(0,o.kt)("th",{parentName:"tr",align:null},"Is Lazy?"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null," mini_doc ")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/echasnovski/mini.doc"},"echasnovski/mini.doc")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/echasnovski/mini.doc/commit/N/A"})),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h2",{id:"keybinds"},"Keybinds"),(0,o.kt)("p",null,"Override these keybinds in your config.lua:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local doc_gen = doom.core.doc_gen\ndoc_gen.binds = {\n  { "<leader>prefix", "<cmd>echo \'my new keybind\'<CR>", name = "Description for my new keybind" }\n}\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Keymap"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null," ","<","leader",">","Dg ")),(0,o.kt)("td",{parentName:"tr",align:null},"Document current file")))),(0,o.kt)("h2",{id:"commands"},"Commands"),(0,o.kt)("p",null,"Commands for the ",(0,o.kt)("inlineCode",{parentName:"p"},"doom.core.doc_gen")," module."),(0,o.kt)("p",null,"Note: Plugins may create additional commands, these will be avaliable once\nthe plugin loads.  Please check the docs for these ",(0,o.kt)("a",{parentName:"p",href:"#plugins-packages"},"plugins"),"."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Command"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null," :GenerateDocCurrentFile ")),(0,o.kt)("td",{parentName:"tr",align:null},"Generates markdown documentation in the doc folder.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null," :GenerateDocAll ")),(0,o.kt)("td",{parentName:"tr",align:null},"Generates documentation for the entire framework")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"            `doc_gen.generate_keybind_documentation`({path})\n")),(0,o.kt)("p",null,"Given a module's ",(0,o.kt)("inlineCode",{parentName:"p"},"binds")," field, returns a string of a formatted markdown table\ndocumenting all the keymaps\n{path} ",(0,o.kt)("inlineCode",{parentName:"p"},"(string)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"           `doc_gen.generate_commands_documentation`({path})\n")),(0,o.kt)("p",null,"Generates\n{path} ",(0,o.kt)("inlineCode",{parentName:"p"},"(string)"),' Path to module from doom global object i.e. "core.doc_gen"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"           `doc_gen.generate_autocmds_documentation`({path})\n")),(0,o.kt)("p",null,"Generates\n{path} ",(0,o.kt)("inlineCode",{parentName:"p"},"(string)"),' Path to module from doom global object i.e. "core.doc_gen"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"           `doc_gen.generate_packages_documentation`({path})\n")),(0,o.kt)("p",null,"Generates\n{path} ",(0,o.kt)("inlineCode",{parentName:"p"},"(string)"),' Path to module from doom global object i.e. "core.doc_gen"'))}u.isMDXComponent=!0}}]);