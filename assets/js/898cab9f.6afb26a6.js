"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[9014],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=u(n),d=l,g=c["".concat(s,".").concat(d)]||c[d]||p[d]||r;return n?a.createElement(g,o(o({ref:t},m),{},{components:n})):a.createElement(g,o({ref:t},m))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5309:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(7462),l=(n(7294),n(3905));const r={},o="Auto install (LSP/null-ls)",i={unversionedId:"modules/features/auto_install",id:"modules/features/auto_install",title:"Auto install (LSP/null-ls)",description:"This module adds the ability to auto install lsps/null-ls providers when",source:"@site/docs/modules/features/auto_install.md",sourceDirName:"modules/features",slug:"/modules/features/auto_install",permalink:"/docs/modules/features/auto_install",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Code annotations",permalink:"/docs/modules/features/annotations"},next:{title:"Sessions",permalink:"/docs/modules/features/auto_session"}},s={},u=[{value:"Deleting all mason.nvim packages",id:"deleting-all-masonnvim-packages",level:2},{value:"Settings",id:"settings",level:2},{value:"Plugins/Packages",id:"pluginspackages",level:2},{value:"Commands",id:"commands",level:2}],m={toc:u};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"auto-install-lspnull-ls"},"Auto install (LSP/null-ls)"),(0,l.kt)("p",null,"This module adds the ability to auto install lsps/null-ls providers when\nenabling language modules using ",(0,l.kt)("inlineCode",{parentName:"p"},"mason.nvim"),".  It will not try to keep the\nLSP providers or null-ls sources up to date.  Sometimes plugins or doom-nvim\nmay update and you will have to manually update the packages yourself using\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},":Mason[Install|Uninstall] <package_name>")," command."),(0,l.kt)("h2",{id:"deleting-all-masonnvim-packages"},"Deleting all mason.nvim packages"),(0,l.kt)("p",null,"You can delete all mason nvim packages by running the command ",(0,l.kt)("inlineCode",{parentName:"p"},":DoomNuke mason")),(0,l.kt)("h2",{id:"settings"},"Settings"),(0,l.kt)("p",null,"Settings for the auto_install module."),(0,l.kt)("p",null,"You can access and override these values in your ",(0,l.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local auto_install_settings = doom.features.auto_install.settings\nauto_install_settings.<field> = <new_value>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"auto_install.settings = {\n  lsp = {\n    --- List of lsp providers to automatically install and setup\n    ensure_installed = {},\n    --- Whether or not to automatically install the lsp providers in ensure_installed\n    automatic_installation = true,\n  },\n}\n")),(0,l.kt)("h2",{id:"pluginspackages"},"Plugins/Packages"),(0,l.kt)("p",null,"Plugins for the ",(0,l.kt)("inlineCode",{parentName:"p"},"doom.features.auto_install")," module."),(0,l.kt)("p",null,"These plugins will be passed into packer.nvim on startup.  You can tweak\nthe packer options by accessing these values in your ",(0,l.kt)("inlineCode",{parentName:"p"},"config.lua")," file.\ni.e.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local auto_install_packages = doom.features.auto_install.packages\nauto_install_packages['mason.nvim'].commit = '<my_new_commit_sha>'\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Source"),(0,l.kt)("th",{parentName:"tr",align:null},"Commit"),(0,l.kt)("th",{parentName:"tr",align:null},"Is Lazy?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," mason.nvim ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/williamboman/mason.nvim"},"williamboman/mason.nvim")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/williamboman/mason.nvim/commit/75860d253f9e66d08c9289dc43fae790882eb136"},"53f9e66d08c9289dc43fae790882eb136")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," mason-lspconfig ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/williamboman/mason-lspconfig"},"williamboman/mason-lspconfig")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/williamboman/mason-lspconfig/commit/b70dedab5ceb5f3f84c6bc9ceea013292a14f8dc"},"b5ceb5f3f84c6bc9ceea013292a14f8dc")),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"commands"},"Commands"),(0,l.kt)("p",null,"Commands for the ",(0,l.kt)("inlineCode",{parentName:"p"},"doom.features.auto_install")," module."),(0,l.kt)("p",null,"Note: Plugins may create additional commands, these will be avaliable once\nthe plugin loads.  Please check the docs for these ",(0,l.kt)("a",{parentName:"p",href:"#plugins-packages"},"plugins"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," :LspInstall ")),(0,l.kt)("td",{parentName:"tr",align:null},"Install an LSP")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," :LspUninstall ")),(0,l.kt)("td",{parentName:"tr",align:null},"Uninstall an LSP")))))}p.isMDXComponent=!0}}]);