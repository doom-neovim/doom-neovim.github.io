"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[6136],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),c=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,g=p["".concat(m,".").concat(d)]||p[d]||u[d]||o;return n?r.createElement(g,l(l({ref:t},s),{},{components:n})):r.createElement(g,l({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7487:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},l="Comments",i={unversionedId:"modules/features/comment",id:"modules/features/comment",title:"Comments",description:"Easily toggle comments for all languages",source:"@site/docs/modules/features/comment.md",sourceDirName:"modules/features",slug:"/modules/features/comment",permalink:"/docs/modules/features/comment",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Code colorizer",permalink:"/docs/modules/features/colorizer"},next:{title:"DAP / Debugger",permalink:"/docs/modules/features/dap"}},m={},c=[{value:"Settings",id:"settings",level:2},{value:"Plugins/Packages",id:"pluginspackages",level:2},{value:"Keybinds",id:"keybinds",level:2}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"comments"},"Comments"),(0,a.kt)("p",null,"Easily toggle comments for all languages"),(0,a.kt)("h2",{id:"settings"},"Settings"),(0,a.kt)("p",null,"Settings for the comment module."),(0,a.kt)("p",null,"You can access and override these values in your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local comment_settings = doom.features.comment.settings\ncomment_settings.<field> = <new_value>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'comment.settings = {\n  --- Add a space b/w comment and the line\n  --- @type boolean\n  padding = true,\n\n  --- Whether the cursor should stay at its position\n  --- NOTE: This only affects NORMAL mode mappings and doesn\'t work with dot-repeat\n  --- @type boolean\n  sticky = true,\n\n  --- Lines to be ignored while comment/uncomment.\n  --- Could be a regex string or a function that returns a regex string.\n  --- Example: Use \'^$\' to ignore empty lines\n  --- @type string|fun():string\n  ignore = nil,\n\n  --- Passes to ts-context-commentstring to get commentstring in JSX\n  pre_hook = function(ctx)\n    -- Only calculate commentstring for tsx filetypes\n    if vim.bo.filetype == "typescriptreact" then\n      local comment_utils = require("Comment.utils")\n\n      -- Detemine whether to use linewise or blockwise commentstring\n      local type = ctx.ctype == comment_utils.ctype.line and "__default" or "__multiline"\n\n      -- Determine the location where to calculate commentstring from\n      local location = nil\n      if ctx.ctype == comment_utils.ctype.block then\n        location = require("ts_context_commentstring.utils").get_cursor_location()\n      elseif ctx.cmotion == comment_utils.cmotion.v or ctx.cmotion == comment_utils.cmotion.V then\n        location = require("ts_context_commentstring.utils").get_visual_start_location()\n      end\n\n      return require("ts_context_commentstring.internal").calculate_commentstring({\n        key = type,\n        location = location,\n      })\n    end\n  end,\n}\n')),(0,a.kt)("h2",{id:"pluginspackages"},"Plugins/Packages"),(0,a.kt)("p",null,"Plugins for the ",(0,a.kt)("inlineCode",{parentName:"p"},"doom.features.comment")," module."),(0,a.kt)("p",null,"These plugins will be passed into packer.nvim on startup.  You can tweak\nthe packer options by accessing these values in your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua")," file.\ni.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local comment_packages = doom.features.comment.packages\ncomment_packages['Comment.nvim'].commit = '<my_new_commit_sha>'\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Key"),(0,a.kt)("th",{parentName:"tr",align:null},"Source"),(0,a.kt)("th",{parentName:"tr",align:null},"Commit"),(0,a.kt)("th",{parentName:"tr",align:null},"Is Lazy?"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," Comment.nvim ")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/numToStr/Comment.nvim"},"numToStr/Comment.nvim")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/numToStr/Comment.nvim/commit/98c81efa6ac1946b63eef685c27f8da928d9f4e7"},"a6ac1946b63eef685c27f8da928d9f4e7")),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h2",{id:"keybinds"},"Keybinds"),(0,a.kt)("p",null,"Override these keybinds in your config.lua:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local comment = doom.features.comment\ncomment.binds = {\n  { "<leader>prefix", "<cmd>echo \'my new keybind\'<CR>", name = "Description for my new keybind" }\n}\n')),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Keymap"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," gc ")),(0,a.kt)("td",{parentName:"tr",align:null},"Comment motion")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," gc ")),(0,a.kt)("td",{parentName:"tr",align:null},"Comment line")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," gb ")),(0,a.kt)("td",{parentName:"tr",align:null},"Comment block")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," gcc ")),(0,a.kt)("td",{parentName:"tr",align:null},"Comment line")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," gcA ")),(0,a.kt)("td",{parentName:"tr",align:null},"Comment end of line")))))}u.isMDXComponent=!0}}]);