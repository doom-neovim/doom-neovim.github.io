"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[6761],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,f=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8636:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const l={},i="Indent Lines",s={unversionedId:"modules/features/indentlines",id:"modules/features/indentlines",title:"Indent Lines",description:"Shows indent lines such as tabs and spaces",source:"@site/docs/modules/features/indentlines.md",sourceDirName:"modules/features",slug:"/modules/features/indentlines",permalink:"/docs/modules/features/indentlines",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Illuminate",permalink:"/docs/modules/features/illuminate"},next:{title:"lazygit",permalink:"/docs/modules/features/lazygit"}},o={},u=[{value:"Settings",id:"settings",level:2},{value:"Plugins/Packages",id:"pluginspackages",level:2}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"indent-lines"},"Indent Lines"),(0,a.kt)("p",null,"Shows indent lines such as tabs and spaces"),(0,a.kt)("h2",{id:"settings"},"Settings"),(0,a.kt)("p",null,"Settings for the indentlines module."),(0,a.kt)("p",null,"You can access and override these values in your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local indentlines_settings = doom.features.indentlines.settings\nindentlines_settings.<field> = <new_value>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'indentlines.settings = {\n  char = "\u2502",\n  use_treesitter = true,\n  show_first_indent_level = false,\n  filetype_exclude = { "help", "dashboard", "packer", "norg", "DoomInfo" },\n  buftype_exclude = { "terminal" },\n}\n')),(0,a.kt)("h2",{id:"pluginspackages"},"Plugins/Packages"),(0,a.kt)("p",null,"Plugins for the ",(0,a.kt)("inlineCode",{parentName:"p"},"doom.features.indentlines")," module."),(0,a.kt)("p",null,"These plugins will be passed into packer.nvim on startup.  You can tweak\nthe packer options by accessing these values in your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua")," file.\ni.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local indentlines_packages = doom.features.indentlines.packages\nindentlines_packages['indent-blankline.nvim'].commit = '<my_new_commit_sha>'\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Key"),(0,a.kt)("th",{parentName:"tr",align:null},"Source"),(0,a.kt)("th",{parentName:"tr",align:null},"Commit"),(0,a.kt)("th",{parentName:"tr",align:null},"Is Lazy?"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," indent-blankline.nvim ")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/lukas-reineke/indent-blankline.nvim"},"lukas-reineke/indent-blankline.nvim")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/lukas-reineke/indent-blankline.nvim/commit/db7cbcb40cc00fc5d6074d7569fb37197705e7f6"},"40cc00fc5d6074d7569fb37197705e7f6")),(0,a.kt)("td",{parentName:"tr",align:null})))))}p.isMDXComponent=!0}}]);