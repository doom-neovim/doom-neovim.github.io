"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[4725],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>c});var a=n(7294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var p=a.createContext({}),d=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},m=function(t){var e=d(t.components);return a.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},s=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,p=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),s=d(n),c=l,g=s["".concat(p,".").concat(c)]||s[c]||u[c]||r;return n?a.createElement(g,o(o({ref:e},m),{},{components:n})):a.createElement(g,o({ref:e},m))}));function c(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,o=new Array(r);o[0]=s;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:l,o[1]=i;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4335:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=n(7462),l=(n(7294),n(3905));const r={},o="LSP / Code Completions",i={unversionedId:"modules/features/lsp",id:"modules/features/lsp",title:"LSP / Code Completions",description:"Adds code completions capabilities with nvim-cmp and nvim-lspconfig.",source:"@site/docs/modules/features/lsp.md",sourceDirName:"modules/features",slug:"/modules/features/lsp",permalink:"/docs/modules/features/lsp",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Linter / Formatter",permalink:"/docs/modules/features/linter"},next:{title:"REPL",permalink:"/docs/modules/features/lsp_progress"}},p={},d=[{value:"Adding extra nvim-cmp sources",id:"adding-extra-nvim-cmp-sources",level:2},{value:"Settings",id:"settings",level:2},{value:"Plugins/Packages",id:"pluginspackages",level:2},{value:"Keybinds",id:"keybinds",level:2}],m={toc:d};function u(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"lsp--code-completions"},"LSP / Code Completions"),(0,l.kt)("p",null,"Adds code completions capabilities with nvim-cmp and nvim-lspconfig."),(0,l.kt)("p",null,"This module adds a number of code completion features to neovim.  It sets\nup nvim-cmp with lsp, path, buffer, nvim and snippet sources and also adds\nlsp signatures to show function signatures as you type.  This module does\nnot setup any language LSPs, those are configured within the language modules.\nInstead this module setups and configures nvim-cmp and other plugins that are\nshared by language modules."),(0,l.kt)("h2",{id:"adding-extra-nvim-cmp-sources"},"Adding extra nvim-cmp sources"),(0,l.kt)("p",null,"To add extra completion sources to nvim-cmp you will first need to install\nthe nvim-cmp extension in your ",(0,l.kt)("inlineCode",{parentName:"p"},"config.lua")," file.  You will then need to\nadd the source to the settings table of this module.  Here's an example\nusing cmp-calc."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"-- config.lua\ndoom.use_package(\"hrsh7th/cmp-calc\")\nlocal lsp_settings = doom.features.lsp.settings\ntable.insert(lsp_settings.completion.sources, { name = 'calc' })\n")),(0,l.kt)("p",null,"If you want to add a source that needs access to nvim-cmp.  I.e ",(0,l.kt)("inlineCode",{parentName:"p"},"cmp-nvim-lsp-document-symbol"),"\nyou will need to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"on_post_config")," hook of the packages field of the ",(0,l.kt)("inlineCode",{parentName:"p"},"lsp"),"\nmodule."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"-- config.lua\ndoom.use_package({ \"hrsh7th/cmp-nvim-lsp-document-symbol\", after=\"nvim-cmp\" })\ndoom.features.lsp.packages[\"nvim-cmp\"].on_post_config(function()\n  local cmp = require'cmp'\n  cmp.setup.cmdline('/', {\n    sources = cmp.config.sources({\n      { name = 'nvim_lsp_document_symbol' }\n    }, {\n      { name = 'buffer' }\n    })\n  })\nend)\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 You will have reload doom-nvim and run ",(0,l.kt)("inlineCode",{parentName:"p"},":PackerCompile")," after adding pre/post config hooks.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 Some cmp completion sources do not work well with lazy loading.\nYou may have to disable lazy loading so it works properly."),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"doom.features.lsp.packages['nvim-cmp'].event = nil -- Removes the load on InsertEnter autocommand\n"))),(0,l.kt)("h2",{id:"settings"},"Settings"),(0,l.kt)("p",null,"Settings for the lsp module."),(0,l.kt)("p",null,"You can access and override these values in your ",(0,l.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local lsp_settings = doom.features.lsp.settings\nlsp_settings.<field> = <new_value>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'lsp.settings = {\n  -- Settings for cmp_luasnip\n  snippets = {\n    history = true,\n    updateevents = "TextChanged,TextChangedI",\n  },\n  -- Settings for "lsp_signature.nvim"\n  signature = {\n    -- This is mandatory, otherwise border config won\'t get registered.\n    -- If you want to hook lspsaga or other signature handler, pls set to false\n    bind = true,\n    -- Show hint in a floating window\n    floating_window = false,\n    -- Position floating window above or below cursor\n    floating_window_above_cur_line = true,\n    -- Number of comment/doc lines when inserting text (when `floating_window = true`)\n    doc_lines = 10,\n    -- When true, keep floating window open until all parameters completed\n    fix_pos = false, -- set to true, the floating window will not auto-close until finish all parameters\n    hint_enable = true, -- virtual hint enable\n    hint_prefix = "\ue7a1 ",\n    hint_scheme = "String",\n    hi_parameter = "Search", -- how your parameter will be highlight\n    max_height = 12, -- max height of signature floating_window, if content is more than max_height, you can scroll down\n    max_width = 120, -- max_width of signature floating_window, line will be wrapped if exceed max_width\n    transparency = 100,\n    extra_trigger_chars = {}, -- Array of extra characters that will trigger signature completion, e.g., {"(", ","}\n    zindex = 200, -- by default it will be on top of all floating windows, set to 50 send it to bottom\n    debug = false, -- set to true to enable debug logging\n    padding = "", -- character to pad on left and right of signature can be \' \', or \'|\'  etc\n    shadow_blend = 36, -- if you using shadow as border use this set the opacity\n    shadow_guibg = "Black", -- if you using shadow as border use this set the color e.g. \'Green\' or \'#121315\'\n  },\n  icons = {\n    error = "\uf057",\n    warn = "\uf071",\n    hint = "\uf06a",\n    info = "\uf05a",\n  },\n  severity_sort = true,\n  -- Settings for nvim-cmp\n  completion = {\n    -- Icons for each completion type\n    kinds = {\n      Text = "\uf49e ",\n      Method = "\uf6a6 ",\n      Function = "\uf794 ",\n      Constructor = "\uf423 ",\n      Field = "\ufd32 ",\n      Variable = "\ue716 ",\n      Class = "\uf816 ",\n      Interface = "\ufc2e ",\n      Module = "\uf668 ",\n      Property = "\ufc20 ",\n      Unit = "\uf475 ",\n      Value = "\uf89f ",\n      Enum = "\ufa57",\n      Keyword = "\uf80a ",\n      Snippet = "\uf44f ",\n      Color = "\uf8d7 ",\n      File = "\uf713 ",\n      Reference = "\uf71c ",\n      Folder = "\uf74a ",\n      EnumMember = "\uf15d ",\n      Constant = "\ufc80 ",\n      Struct = "\ufce4 ",\n      Event = "\uf0e7 ",\n      Operator = "\uf694 ",\n      TypeParameter = "\uf783 ",\n    },\n    experimental = {\n      -- Show current completion as ghost text in line\n      -- @type boolean\n      ghost_text = true,\n    },\n    completeopt = "menu,menuone,preview,noinsert",\n    window = {\n      documentation = {\n        border = { "\u256d", "\u2500", "\u256e", "\u2502", "\u256f", "\u2500", "\u2570", "\u2502" },\n      },\n    },\n    snippet = {\n      expand = function(args)\n        require("luasnip").lsp_expand(args.body)\n      end,\n    },\n    sources = {\n      { name = "nvim_lua" },\n      { name = "nvim_lsp" },\n      { name = "luasnip" },\n      { name = "path" },\n      { name = "buffer" },\n    },\n  },\n  sorting = {\n    "offset",\n    "exact",\n    "score",\n    "kind",\n    "sort_text",\n    "length",\n    "order",\n  },\n}\n\n')),(0,l.kt)("h2",{id:"pluginspackages"},"Plugins/Packages"),(0,l.kt)("p",null,"Plugins for the ",(0,l.kt)("inlineCode",{parentName:"p"},"doom.features.lsp")," module."),(0,l.kt)("p",null,"These plugins will be passed into packer.nvim on startup.  You can tweak\nthe packer options by accessing these values in your ",(0,l.kt)("inlineCode",{parentName:"p"},"config.lua")," file.\ni.e.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local lsp_packages = doom.features.lsp.packages\nlsp_packages['nvim-lspconfig'].commit = '<my_new_commit_sha>'\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Source"),(0,l.kt)("th",{parentName:"tr",align:null},"Commit"),(0,l.kt)("th",{parentName:"tr",align:null},"Is Lazy?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," nvim-lspconfig ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/neovim/nvim-lspconfig"},"neovim/nvim-lspconfig")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/neovim/nvim-lspconfig/commit/334cc8601ce5f04384ebe79527284fd177938412"},"01ce5f04384ebe79527284fd177938412")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," cmp-nvim-lsp ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/cmp-nvim-lsp"},"hrsh7th/cmp-nvim-lsp")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/cmp-nvim-lsp/commit/affe808a5c56b71630f17aa7c38e15c59fd648a8"},"a5c56b71630f17aa7c38e15c59fd648a8")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," cmp_luasnip ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/saadparwaiz1/cmp_luasnip"},"saadparwaiz1/cmp_luasnip")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/saadparwaiz1/cmp_luasnip/commit/a9de941bcbda508d0a45d28ae366bb3f08db2e36"},"bcbda508d0a45d28ae366bb3f08db2e36")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," nvim-cmp ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/nvim-cmp"},"hrsh7th/nvim-cmp")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/nvim-cmp/commit/0e436ee23abc6c3fe5f3600145d2a413703e7272"},"23abc6c3fe5f3600145d2a413703e7272")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," cmp-path ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/cmp-path"},"hrsh7th/cmp-path")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/cmp-path/commit/91ff86cd9c29299a64f968ebb45846c485725f23"},"d9c29299a64f968ebb45846c485725f23")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," lsp_signature.nvim ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/ray-x/lsp_signature.nvim"},"ray-x/lsp_signature.nvim")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/ray-x/lsp_signature.nvim/commit/e65a63858771db3f086c8d904ff5f80705fd962b"},"58771db3f086c8d904ff5f80705fd962b")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," cmp-nvim-lua ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/cmp-nvim-lua"},"hrsh7th/cmp-nvim-lua")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/cmp-nvim-lua/commit/d276254e7198ab7d00f117e88e223b4bd8c02d21"},"e7198ab7d00f117e88e223b4bd8c02d21")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," cmp-buffer ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/cmp-buffer"},"hrsh7th/cmp-buffer")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/hrsh7th/cmp-buffer/commit/3022dbc9166796b644a841a02de8dd1cc1d311fa"},"9166796b644a841a02de8dd1cc1d311fa")),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"                             `lsp.binds`()\n")),(0,l.kt)("h2",{id:"keybinds"},"Keybinds"),(0,l.kt)("p",null,"Override these keybinds in your config.lua:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local lsp = doom.features.lsp\nlsp.binds = {\n  { "<leader>prefix", "<cmd>echo \'my new keybind\'<CR>", name = "Description for my new keybind" }\n}\n')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Keymap"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," K ")),(0,l.kt)("td",{parentName:"tr",align:null},"Show hover doc")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," [d ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to prev diagnostic")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ]d ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to next diagnostic")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," gD ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to declaration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," gd ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to definition")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," gr ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to references")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," gi ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to implementation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ga ")),(0,l.kt)("td",{parentName:"tr",align:null},"Do code action")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","C-p",">"," ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to prev diagnostic")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","C-n",">"," ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to next diagnostic")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","C-k",">"," ")),(0,l.kt)("td",{parentName:"tr",align:null},"Show signature help")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cr ")),(0,l.kt)("td",{parentName:"tr",align:null},"Rename")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","ca ")),(0,l.kt)("td",{parentName:"tr",align:null},"Do action")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","ct ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cD ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to declaration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cd ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to definition")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cR ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to references")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","ci ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to implementation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cli ")),(0,l.kt)("td",{parentName:"tr",align:null},"Inform")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","clr ")),(0,l.kt)("td",{parentName:"tr",align:null},"Restart")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cls ")),(0,l.kt)("td",{parentName:"tr",align:null},"Start")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cld ")),(0,l.kt)("td",{parentName:"tr",align:null},"Disconnect")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cd[ ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to prev")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cd] ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to next")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cdp ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to prev")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cdn ")),(0,l.kt)("td",{parentName:"tr",align:null},"Jump to next")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cdL ")),(0,l.kt)("td",{parentName:"tr",align:null},"Line")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","cdl ")),(0,l.kt)("td",{parentName:"tr",align:null},"Loclist")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," ","<","leader",">","tc ")),(0,l.kt)("td",{parentName:"tr",align:null},"Toggle completion")))))}u.isMDXComponent=!0}}]);