"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[7162],{3905:(e,n,o)=>{o.d(n,{Zo:()=>u,kt:()=>p});var t=o(7294);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function l(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){a(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function r(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var d=t.createContext({}),s=function(e){var n=t.useContext(d),o=n;return e&&(o="function"==typeof e?e(n):l(l({},n),e)),o},u=function(e){var n=s(e.components);return t.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var o=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=s(o),p=a,g=c["".concat(d,".").concat(p)]||c[p]||m[p]||i;return o?t.createElement(g,l(l({ref:n},u),{},{components:o})):t.createElement(g,l({ref:n},u))}));function p(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=o.length,l=new Array(i);l[0]=c;var r={};for(var d in n)hasOwnProperty.call(n,d)&&(r[d]=n[d]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var s=2;s<i;s++)l[s]=o[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,o)}c.displayName="MDXCreateElement"},9390:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>s});var t=o(7462),a=(o(7294),o(3905));const i={},l="Introduction",r={unversionedId:"getting-started",id:"getting-started",title:"Introduction",description:"This guide will show you how to install doom-nvim as well as introduce you to",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/docs/getting-started",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is Doom Nvim?",permalink:"/docs/introduction"},next:{title:"keymaps",permalink:"/docs/keymaps"}},d={},s=[{value:"Install",id:"install",level:2},{value:"Manual (Mac OS / Linux)",id:"manual-mac-os--linux",level:3},{value:"How to use doom-nvim",id:"how-to-use-doom-nvim",level:2},{value:"How to configure doom nvim?",id:"how-to-configure-doom-nvim",level:2},{value:"Adding a new plugin or package",id:"adding-a-new-plugin-or-package",level:3},{value:"Adding keybinds",id:"adding-keybinds",level:3},{value:"Adding autocommands",id:"adding-autocommands",level:3},{value:"Adding commands",id:"adding-commands",level:3},{value:"Overriding a module&#39;s keybinds, autocommands or commands",id:"overriding-a-modules-keybinds-autocommands-or-commands",level:2},{value:"Overriding a module&#39;s plugin config / module settings",id:"overriding-a-modules-plugin-config--module-settings",level:2},{value:"Extending the packer config fuction",id:"extending-the-packer-config-fuction",level:3},{value:"Replacing the config function entirely",id:"replacing-the-config-function-entirely",level:3}],u={toc:s};function m(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"This guide will show you how to install doom-nvim as well as introduce you to\nthe basics of configuration."),(0,a.kt)("h2",{id:"install"},"Install"),(0,a.kt)("p",null,"Copy and paste this oneliner into your terminal.  It will clone the ",(0,a.kt)("inlineCode",{parentName:"p"},"doom-nvim"),"\nrepository into ",(0,a.kt)("inlineCode",{parentName:"p"},"$XDG_CONFIG_HOME/nvim"),".  If a folder already exists there, it\nwill back it up as ",(0,a.kt)("inlineCode",{parentName:"p"},"nvim-old/"),". ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/doom-neovim/doom-nvim/main/tools/install.sh"},"[source]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"bash <(curl -s https://raw.githubusercontent.com/doom-neovim/doom-nvim/main/tools/install.sh)\n")),(0,a.kt)("h3",{id:"manual-mac-os--linux"},"Manual (Mac OS / Linux)"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Clone doom-nvim to ~/.config/nvim")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/doom-neovim/doom-nvim.git ${XDG_CONFIG_HOME:-$HOME/.config}/nvim\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"(optional) Checkout the latest stable version in a new branch called ",(0,a.kt)("inlineCode",{parentName:"li"},"my-config")," so the auto-updater works.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout tags/$(git tag -l --sort -version:refname | head -n 1) -b my-config\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u2139\ufe0f The auto-updater will be broken without this step but you're free to check updates using the ",(0,a.kt)("inlineCode",{parentName:"p"},":DoomCheckUpdates")," command and manage updates manually.")),(0,a.kt)("h2",{id:"how-to-use-doom-nvim"},"How to use doom-nvim"),(0,a.kt)("p",null,"Almost all of your config will be done in two files: ",(0,a.kt)("inlineCode",{parentName:"p"},"modules.lua")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua"),"."),(0,a.kt)("p",null,"Inside of ",(0,a.kt)("inlineCode",{parentName:"p"},"modules.lua")," you can enable/disable 'doom modules', and more that add capabilities to neovim.  Enable\na module by uncommenting the entry and disable it by commenting it out."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- modules.lua\n\nreturn {\n  -- `lsp` module is enabled, `telescope is disabled`\n  features = {\n    'lsp'\n    -- 'telescope'\n  },\n  -- `lua` language is enabled, `rust is disabled`\n  langs = {\n    'lua',\n    -- 'rust',\n  }\n}\n")),(0,a.kt)("p",null,"You can find a complete list of doom modules ",(0,a.kt)("a",{parentName:"p",href:"./modules/all-modules"},"here"),"."),(0,a.kt)("h2",{id:"how-to-configure-doom-nvim"},"How to configure doom nvim?"),(0,a.kt)("p",null,"If you want to add plugins or packages, add keybinds, commands, autocommands or\nanything else this should be done in your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua")," file."),(0,a.kt)("h3",{id:"adding-a-new-plugin-or-package"},"Adding a new plugin or package"),(0,a.kt)("p",null,"You can add more plugins/packages by adding the following block to your\nconfig.lua:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- Just install a package, do not configure\ndoom.use_package('sainnhe/sonokai', 'EdenEast/nightfox.nvim')\n-- Install a package with packer.nvim api\ndoom.use_package({\n  'rafcamlet/nvim-luapad',\n  opt = true,\n  cmd = 'Luapad'\n})\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"doom.use_package")," wraps packer.nvim and has the same ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/wbthomason/packer.nvim#specifying-plugins"},"api"),".")),(0,a.kt)("h3",{id:"adding-keybinds"},"Adding keybinds"),(0,a.kt)("p",null,"You can add additional keybinds by adding the following block to your config.lua:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"doom.use_keybind({\n  { '<leader>u', name = '+user', { -- Names this group in whichkey \"+user\"\n    { 's', '<cmd>Telescope git_status<CR>', name = 'Git status' } -- Adds `<leader>us` keybind to trigger `Telescope git_status`\n  }},\n})\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information on adding and configuring keybinds, see ",(0,a.kt)("a",{parentName:"p",href:"./keymaps"},"here"),".")),(0,a.kt)("h3",{id:"adding-autocommands"},"Adding autocommands"),(0,a.kt)("p",null,"You can add additional autocommands by adding the following block to your\nconfig.lua:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'doom.use_autocmd({\n  { "FileType", "rust", function() print(\'Crab\') end },\n  { "FileType", "python", "<CMD>echo \'snake\'<CR>", once = true }\n})\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information on adding and configuring autocommands, see ",(0,a.kt)("a",{parentName:"p",href:"./autocommands"},"here"),".")),(0,a.kt)("h3",{id:"adding-commands"},"Adding commands"),(0,a.kt)("p",null,"You can add additional commands by adding the following block to your\nconfig.lua:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"doom.use_cmd( { 'MyCommand', function() print('test') end } )\ndoom.use_cmd({\n  { 'MyOtherCommand', function() print('my_other_command') end },\n  { 'MyStringCommand', \"<CMD>echo 'my_string_command'<CR>\",\n})\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information on adding and configuring commands, see ",(0,a.kt)("a",{parentName:"p",href:"./commands"},"here"),".")),(0,a.kt)("h2",{id:"overriding-a-modules-keybinds-autocommands-or-commands"},"Overriding a module's keybinds, autocommands or commands"),(0,a.kt)("p",null,"You may want to tweak the default behaviour of a doom module this can also be done\nin your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua"),".  The following code block will show you how to change the\nsettings of a module override the keybinds, commands and or autocommands\nof a module."),(0,a.kt)("p",null,"We recommend inspecting the module source to see what you're working with."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'\nlocal lsp = doom.features.lsp -- Get the lsp module from the `features` category\n\n-- Replace all keybinds with the following\nlsp.binds = {\n  { "g", {\n    { "D", vim.lsp.buf.declaration, name = "Declarations"},\n    { "d", vim.lsp.buf.definition, name = "Definition"},\n    { "r", vim.lsp.buf.declaration, name = "References"},\n    { "i", vim.lsp.buf.implementation, name = "implementation"},\n  }}\n}\n\nlocal telescope = doom.features.telescope -- Get the telescope module from the `features` category\n\n-- Replace the autocommands with the following\ntelescope.autocmds = {\n   -- Disables wrapping in the telescope preview\n  { "User", "TelescopePreviewerLoaded", "setlocal nowrap" },\n}\n\n-- Replace cmds with the following\ntelescope.cmds = {\n   -- Creates command `:ff` to find files.\n  { "ff", "<CMD>Telescope find_files<CR>"}\n}\n')),(0,a.kt)("h2",{id:"overriding-a-modules-plugin-config--module-settings"},"Overriding a module's plugin config / module settings"),(0,a.kt)("p",null,"If you want to edit the config of a specific plugin used by a doom module there\nare a few options. Firstly you should check to see if the module exposes a setting\nto achieve what you're trying to do.  For example the ",(0,a.kt)("a",{parentName:"p",href:"./modules/features/telescope"},"telescope module")," exposes\nthe entire config that is passed into ",(0,a.kt)("inlineCode",{parentName:"p"},'require("telescope").setup()'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- config.lua\n\nlocal telescope = doom.features.telescope\n-- Ignore media files as well\ntelescope.settings.defaults.file_ignore_patterns = {\n  "^%.git/",\n  "^node_modules/",\n  "^__pycache__/",\n  "%.png",\n  "%.jpg",\n  "%.mp4",\n  }\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 View all settings by checking the documentation for that module ",(0,a.kt)("a",{parentName:"p",href:"./modules/all-modules"},"here"))),(0,a.kt)("h3",{id:"extending-the-packer-config-fuction"},"Extending the packer config fuction"),(0,a.kt)("p",null,"If you want to extend the current config without replacing it entirely you can do\nso using a pre/post config hook.  In this example we use on ",(0,a.kt)("inlineCode",{parentName:"p"},".on_post_config"),"\nhook to run some code after ",(0,a.kt)("inlineCode",{parentName:"p"},"nvim-cmp")," is setup."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- Add document symbols source to nvim cmp's command line\ndoom.use_package({ \"hrsh7th/cmp-nvim-lsp-document-symbol\", after=\"nvim-cmp\" })\nlocal lsp = doom.features.lsp\nlsp.packages[\"nvim-cmp\"].on_post_config(function()\n  local cmp = require'cmp'\n  cmp.setup.cmdline('/', {\n    sources = cmp.config.sources({\n      { name = 'nvim_lsp_document_symbol' }\n    }, {\n      { name = 'buffer' }\n    })\n  })\nend)\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83d\udca1You will have to restart and re-run ",(0,a.kt)("inlineCode",{parentName:"p"},":PackerCompile")," after modifying the\npre/post config hooks.")),(0,a.kt)("h3",{id:"replacing-the-config-function-entirely"},"Replacing the config function entirely"),(0,a.kt)("p",null,"If you want to replace the config function entirely it's recommended to\njust override the whole module.  This can be done by copying the module from the\n",(0,a.kt)("inlineCode",{parentName:"p"},"lua/doom/modules/")," folder into the ",(0,a.kt)("inlineCode",{parentName:"p"},"lua/user/modules/")," folder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'mkdir lua/user/modules/features/lsp/ -p\n# Copy the create an override for the "features.lsp" module\ncp lua/doom/modules/features/lsp/init.lua lua/user/modules/features/lsp/init.lua\n')),(0,a.kt)("p",null,"Now doom-nvim will load the module from the ",(0,a.kt)("inlineCode",{parentName:"p"},"user/")," directory and you're free to\nmake any changes that you want."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83d\udca1You can also override the ",(0,a.kt)("inlineCode",{parentName:"p"},"config")," field of the packer spec but this is more\nlikely to break when updating."),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- config.lua\ndoom.features.lsp.packages['nvim-cmp'].config = function()\n  -- ...\nend\n"))))}m.isMDXComponent=!0}}]);