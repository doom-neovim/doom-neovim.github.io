"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[8145],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,k=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3387:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},l="Doom updater",i={unversionedId:"modules/core/updater",id:"modules/core/updater",title:"Doom updater",description:"Update your doom nvim config using the :DoomUpdate command.",source:"@site/docs/modules/core/updater.md",sourceDirName:"modules/core",slug:"/modules/core/updater",permalink:"/docs/modules/core/updater",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Required",permalink:"/docs/modules/core/treesitter"}},p={},s=[{value:"Settings",id:"settings",level:2},{value:"Commands",id:"commands",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"doom-updater"},"Doom updater"),(0,a.kt)("p",null,"Update your doom nvim config using the :DoomUpdate command."),(0,a.kt)("p",null,"For this module to work you must have your doom-nvim config in a seperate\nbranch.  When you run ",(0,a.kt)("inlineCode",{parentName:"p"},":DoomUpdate"),", doom-nvim will check for new versions\nand attempt to merge it into your branch.  This could cause a merge conflict\nin your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"modules.lua")," file but these should be - trivial\nto resolve as we don't update these files often."),(0,a.kt)("h2",{id:"settings"},"Settings"),(0,a.kt)("p",null,"Settings for the updater module."),(0,a.kt)("p",null,"You can access and override these values in your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local updater_settings = doom.core.updater.settings\nupdater_settings.<field> = <new_value>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"updater.settings = {\n  --- Whether or not to use unstable (alpha builds)\n  --- @type boolean\n  --- @default false\n  unstable = false,\n}\n\n\n")),(0,a.kt)("h2",{id:"commands"},"Commands"),(0,a.kt)("p",null,"Commands for the ",(0,a.kt)("inlineCode",{parentName:"p"},"doom.core.updater")," module."),(0,a.kt)("p",null,"Note: Plugins may create additional commands, these will be avaliable once\nthe plugin loads.  Please check the docs for these ",(0,a.kt)("a",{parentName:"p",href:"#plugins-packages"},"plugins"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Command"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," :DoomUpdate ")),(0,a.kt)("td",{parentName:"tr",align:null},"Update Doom-nvim to the latest version")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," :DoomCheckUpdates ")),(0,a.kt)("td",{parentName:"tr",align:null},"Check and notify of any updates")))),(0,a.kt)("p",null,"@toc_entry doom.core.updater.internal_methods\nInternal methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"                    `updater._pull_tags`({callback})\n")),(0,a.kt)("p",null,"Using git and plenary jobs gets a list of all available versions to update to\n{callback} ",(0,a.kt)("inlineCode",{parentName:"p"},"(function)")," Handler to receive the list of versions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"                 `updater._get_commit_sha`({callback})\n")),(0,a.kt)("p",null,"Gets the current commit sha or error\n{callback} ",(0,a.kt)("inlineCode",{parentName:"p"},"(function(commit_sha,)")," error_string)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"                    `is_version_unstable`({version})\n")),(0,a.kt)("p",null,"Given a version string, checks if it's an alpha/beta version\n{version} ",(0,a.kt)("inlineCode",{parentName:"p"},"(string)"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"boolean")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"                `updater._get_all_versions`({callback})\n")),(0,a.kt)("p",null,"Gets all version tags as a table of strings\n{callback} ",(0,a.kt)("inlineCode",{parentName:"p"},"(function(all_versions,)")," error_string)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    `updater._get_last_version_for_commit`({commit_sha}, {callback})\n")),(0,a.kt)("p",null,"Using a commit sha, finds the first version tag in commit history\n{commit_sha} ",(0,a.kt)("inlineCode",{parentName:"p"},"(string)"),"\n{callback} ",(0,a.kt)("inlineCode",{parentName:"p"},"(function(version_tag,)")," error_string)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"        `updater._fetch_current_and_latest_version`({callback})\n")),(0,a.kt)("p",null,"Gets the current version and the latest upstream version\n{callback} ",(0,a.kt)("inlineCode",{parentName:"p"},"(function(current_version,)")," latest_version, error_string)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"                    `updater.check_updates`({quiet})\n")),(0,a.kt)("p",null,"Entry point for ",(0,a.kt)("inlineCode",{parentName:"p"},":DoomCheckUpdates"),", fetches new tags, compares with current version and notifies results\n{quiet} ",(0,a.kt)("inlineCode",{parentName:"p"},"(boolean)")," When enabled, disable all but error / needs update messages"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"       `updater._try_merge_version`({target_version}, {callback})\n")),(0,a.kt)("p",null,"Attempts to merge a version into the current branch, fails if working tree is dirty\n{target_version} ",(0,a.kt)("inlineCode",{parentName:"p"},"(string)"),"\n{callback} ",(0,a.kt)("inlineCode",{parentName:"p"},"(function(error_string))")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"                 `updater._get_branch_name`({callback})\n")),(0,a.kt)("p",null,"Gets the name of the current working branch\n{callback} ",(0,a.kt)("inlineCode",{parentName:"p"},"(function(branch_name,)")," error)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"                        `updater._try_update`()\n")),(0,a.kt)("p",null,"Entry point for ",(0,a.kt)("inlineCode",{parentName:"p"},":DoomUpdate"),", fetches new tags, compares with current version and attempts to merge new tags into current branch"))}u.isMDXComponent=!0}}]);