"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[1997],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>u});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=r.createContext({}),c=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(m.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=o,f=d["".concat(m,".").concat(u)]||d[u]||p[u]||a;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5862:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={},i=void 0,l={unversionedId:"commands",id:"commands",title:"commands",description:"Commands Service,",source:"@site/docs/commands.md",sourceDirName:".",slug:"/commands",permalink:"/docs/commands",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"autocommands",permalink:"/docs/autocommands"},next:{title:"All modules",permalink:"/docs/modules/all-modules"}},m={},c=[],s={toc:c};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Commands Service,\nProvides functions to wrap neovims APIs to set and remove commands\nActs as a compatibility layer between different API versions.\nManages references to all commands to be cleared for :DoomReload"),(0,o.kt)("p",null,"@class CommandArgs\n@field args string Args parsed to command (if any)\n@field fargs string[] Args split by unescaped whitespace (if any)\n@field line1 number Starting line of the command range\n@field line2 number Final line of the command range\n@field count number Any count supplied (if any)"),(0,o.kt)("p",null,"@class SetCommandOptions\n@field nargs number|'",(0,o.kt)("em",{parentName:"p"},"'|nil Number of expected arguments for the command. '"),"' for variable."),(0,o.kt)("p",null,"IMPLEMENTATIONS\nWraps the nvim functionality to handle different neovim versions."),(0,o.kt)("p",null,"List of all commands set so they can be deleted by ",(0,o.kt)("inlineCode",{parentName:"p"},"commands.del_all()"),"\n@type table<string,boolean|nil>"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"           `commands_service.set`({name}, {command}, {opts})\n")),(0,o.kt)("p",null,"Set a neovim command\n{name} ",(0,o.kt)("inlineCode",{parentName:"p"},"(string)")," Name of command\n{command} ",(0,o.kt)("inlineCode",{parentName:"p"},"(string|function(CommandArgs))"),"\n{opts} ",(0,o.kt)("inlineCode",{parentName:"p"},"(SetCommandOptions|nil)")))}p.isMDXComponent=!0}}]);