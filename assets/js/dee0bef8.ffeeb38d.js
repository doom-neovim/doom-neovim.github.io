"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[322],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>p});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=u(t),p=r,h=m["".concat(s,".").concat(p)]||m[p]||c[p]||o;return t?a.createElement(h,l(l({ref:n},d),{},{components:t})):a.createElement(h,l({ref:n},d))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4962:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const o={},l="Zen",i={unversionedId:"modules/features/zen",id:"modules/features/zen",title:"Zen",description:"Code with tranquility and enter zen mode.",source:"@site/docs/modules/features/zen.md",sourceDirName:"modules/features",slug:"/modules/features/zen",permalink:"/docs/modules/features/zen",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Whichkey",permalink:"/docs/modules/features/whichkey"},next:{title:"Bash",permalink:"/docs/modules/langs/bash"}},s={},u=[{value:"Settings",id:"settings",level:2},{value:"Plugins/Packages",id:"pluginspackages",level:2},{value:"Keybinds",id:"keybinds",level:2}],d={toc:u};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"zen"},"Zen"),(0,r.kt)("p",null,"Code with tranquility and enter zen mode."),(0,r.kt)("h2",{id:"settings"},"Settings"),(0,r.kt)("p",null,"Settings for the zen module."),(0,r.kt)("p",null,"You can access and override these values in your ",(0,r.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local zen_settings = doom.features.zen.settings\nzen_settings.<field> = <new_value>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'zen.settings = {\n  window = {\n    backdrop = 0.95, -- shade the backdrop of the Zen window. Set to 1 to keep the same as Normal\n    -- height and width can be:\n    -- * an absolute number of cells when > 1\n    -- * a percentage of the width / height of the editor when <= 1\n    -- * a function that returns the width or the height\n    width = 120, -- width of the Zen window\n    height = 1, -- height of the Zen window\n    -- by default, no options are changed for the Zen window\n    -- uncomment any of the options below, or add other vim.wo options you want to apply\n    options = {\n      -- signcolumn = "no", -- disable signcolumn\n      -- number = false, -- disable number column\n      -- relativenumber = false, -- disable relative numbers\n      -- cursorline = false, -- disable cursorline\n      -- cursorcolumn = false, -- disable cursor column\n      -- foldcolumn = "0", -- disable fold column\n      -- list = false, -- disable whitespace characters\n    },\n  },\n  plugins = {\n    -- disable some global vim options (vim.o...)\n    -- comment the lines to not apply the options\n    options = {\n      enabled = true,\n      ruler = false, -- disables the ruler text in the cmd line area\n      showcmd = false, -- disables the command in the last line of the screen\n    },\n    twilight = { enabled = true }, -- enable to start Twilight when zen mode opens\n    gitsigns = { enabled = false }, -- disables git signs\n    tmux = { enabled = false }, -- disables the tmux statusline\n    -- this will change the font size on kitty when in zen mode\n    -- to make this work, you need to set the following kitty options:\n    -- - allow_remote_control socket-only\n    -- - listen_on unix:/tmp/kitty\n    kitty = {\n      enabled = false,\n      font = "+4", -- font size increment\n    },\n  },\n  -- callback where you can add custom code when the Zen window opens\n  on_open = function(_) end,\n  -- callback where you can add custom code when the Zen window closes\n  on_close = function() end,\n}\n')),(0,r.kt)("h2",{id:"pluginspackages"},"Plugins/Packages"),(0,r.kt)("p",null,"Plugins for the ",(0,r.kt)("inlineCode",{parentName:"p"},"doom.features.zen")," module."),(0,r.kt)("p",null,"These plugins will be passed into packer.nvim on startup.  You can tweak\nthe packer options by accessing these values in your ",(0,r.kt)("inlineCode",{parentName:"p"},"config.lua")," file.\ni.e.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local zen_packages = doom.features.zen.packages\nzen_packages['zen-mode.nvim'].commit = '<my_new_commit_sha>'\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Source"),(0,r.kt)("th",{parentName:"tr",align:null},"Commit"),(0,r.kt)("th",{parentName:"tr",align:null},"Is Lazy?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null," zen-mode.nvim ")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/folke/zen-mode.nvim"},"folke/zen-mode.nvim")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/folke/zen-mode.nvim/commit/6f5702db4fd4a4c9a212f8de3b7b982f3d93b03c"},"b4fd4a4c9a212f8de3b7b982f3d93b03c")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")))),(0,r.kt)("h2",{id:"keybinds"},"Keybinds"),(0,r.kt)("p",null,"Override these keybinds in your config.lua:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local zen = doom.features.zen\nzen.binds = {\n  { "<leader>prefix", "<cmd>echo \'my new keybind\'<CR>", name = "Description for my new keybind" }\n}\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Keymap"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null," ","<","leader",">","tz ")),(0,r.kt)("td",{parentName:"tr",align:null},"Toggle Zen")))))}c.isMDXComponent=!0}}]);