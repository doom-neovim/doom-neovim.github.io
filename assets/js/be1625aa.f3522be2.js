"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[6856],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4244:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const l={},i="Tabline / Tabs",o={unversionedId:"modules/features/tabline",id:"modules/features/tabline",title:"Tabline / Tabs",description:"Adds tabs to neovim",source:"@site/docs/modules/features/tabline.md",sourceDirName:"modules/features",slug:"/modules/features/tabline",permalink:"/docs/modules/features/tabline",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Code superman",permalink:"/docs/modules/features/superman"},next:{title:"Telescope",permalink:"/docs/modules/features/telescope"}},s={},u=[{value:"Settings",id:"settings",level:2},{value:"Plugins/Packages",id:"pluginspackages",level:2},{value:"Keybinds",id:"keybinds",level:2}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tabline--tabs"},"Tabline / Tabs"),(0,a.kt)("p",null,"Adds tabs to neovim"),(0,a.kt)("h2",{id:"settings"},"Settings"),(0,a.kt)("p",null,"Settings for the tabline module."),(0,a.kt)("p",null,"You can access and override these values in your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local tabline_settings = doom.features.tabline.settings\ntabline_settings.<field> = <new_value>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'tabline.settings = {\n  options = {\n    numbers = function(opts)\n      return string.format("%s", opts.id)\n    end,\n    indicator_icon = "\u258e",\n    buffer_close_icon = "\uf655",\n    modified_icon = "\u25cf",\n    close_icon = "\uf00d",\n    left_trunc_marker = "\uf0a8",\n    right_trunc_marker = "\uf0a9",\n    max_name_length = 20,\n    max_prefix_length = 15, -- prefix used when a buffer is de-duplicated\n    tab_size = 25,\n    diagnostics = "nvim_lsp",\n    diagnostics_indicator = function(_, _, diagnostics_dict, _)\n      local s = " "\n      for e, n in pairs(diagnostics_dict) do\n        local sym = e == "error" and " \uf057 " or (e == "warning" and " \uf071 " or " \uf835 ")\n        s = s .. n .. sym\n      end\n      return s\n    end,\n    -- NOTE: this will be called a lot so don\'t do any heavy processing here\n    custom_filter = function(buf_number)\n      if vim.bo[buf_number].filetype ~= "dashboard" then\n        return true\n      end\n    end,\n    groups = {\n      options = {\n        toggle_hidden_on_enter = true, -- when you re-enter a hidden group this options re-opens that group so the buffer is visible\n      },\n      items = {\n        {\n          name = "Tests",\n          auto_close = true,\n          matcher = function(buf)\n            return buf.filename:match("%_test") or buf.filename:match("%_spec")\n          end,\n        },\n        {\n          name = "Docs",\n          auto_close = true,\n          matcher = function(buf)\n            return buf.filename:match("%.md") or buf.filename:match("%.txt")\n          end,\n        },\n      },\n    },\n    offsets = {\n      {\n        filetype = "NvimTree",\n        text = "File Explorer",\n        text_align = "center",\n      },\n      {\n        filetype = "netrw",\n        text = "File Explorer",\n        text_align = "center",\n      },\n      {\n        filetype = "minimap",\n        text = "Minimap",\n        text_align = "center",\n      },\n      {\n        filetype = "Outline",\n        text = "Symbols",\n        text_align = "center",\n      },\n      {\n        filetype = "packer",\n        text = "Plugins manager",\n        text_align = "center",\n      },\n    },\n    show_buffer_icons = true,\n    show_buffer_close_icons = true,\n    show_close_icon = false,\n    show_tab_indicators = true,\n    persist_buffer_sort = true,\n    separator_style = "thick",\n    enforce_regular_tabs = true,\n    always_show_bufferline = false,\n    sort_by = "directory",\n    custom_areas = {\n      right = function()\n        local result = {}\n        local error = utils_g.get_diagnostic_count(0, [[Error]])\n        local warning = utils_g.get_diagnostic_count(0, [[Warning]])\n        local info = utils_g.get_diagnostic_count(0, [[Information]])\n        local hint = utils_g.get_diagnostic_count(0, [[Hint]])\n\n        if error ~= 0 then\n          result[1] = {\n            text = " \uf057 " .. error,\n            guifg = "#ff6c6b",\n          }\n        end\n\n        if warning ~= 0 then\n          result[2] = {\n            text = " \uf071 " .. warning,\n            guifg = "#ECBE7B",\n          }\n        end\n\n        if hint ~= 0 then\n          result[3] = {\n            text = " \uf059 " .. hint,\n            guifg = "#98be65",\n          }\n        end\n\n        if info ~= 0 then\n          result[4] = {\n            text = " \uf835 " .. info,\n            guifg = "#51afef",\n          }\n        end\n        return result\n      end,\n    },\n  },\n}\n')),(0,a.kt)("h2",{id:"pluginspackages"},"Plugins/Packages"),(0,a.kt)("p",null,"Plugins for the ",(0,a.kt)("inlineCode",{parentName:"p"},"doom.features.tabline")," module."),(0,a.kt)("p",null,"These plugins will be passed into packer.nvim on startup.  You can tweak\nthe packer options by accessing these values in your ",(0,a.kt)("inlineCode",{parentName:"p"},"config.lua")," file.\ni.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local tabline_packages = doom.features.tabline.packages\ntabline_packages['bufferline.nvim'].commit = '<my_new_commit_sha>'\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Key"),(0,a.kt)("th",{parentName:"tr",align:null},"Source"),(0,a.kt)("th",{parentName:"tr",align:null},"Commit"),(0,a.kt)("th",{parentName:"tr",align:null},"Is Lazy?"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," bufferline.nvim ")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/akinsho/bufferline.nvim"},"akinsho/bufferline.nvim")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/akinsho/bufferline.nvim/commit/2d5266d14b7b5dbc54923469b4599f0349f7cedc"},"14b7b5dbc54923469b4599f0349f7cedc")),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h2",{id:"keybinds"},"Keybinds"),(0,a.kt)("p",null,"Override these keybinds in your config.lua:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local tabline = doom.features.tabline\ntabline.binds = {\n  { "<leader>prefix", "<cmd>echo \'my new keybind\'<CR>", name = "Description for my new keybind" }\n}\n')),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Keymap"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," ","<","leader",">","bn ")),(0,a.kt)("td",{parentName:"tr",align:null},"Jump to next")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," ","<","leader",">","b] ")),(0,a.kt)("td",{parentName:"tr",align:null},"Jump to next")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," ","<","leader",">","bp ")),(0,a.kt)("td",{parentName:"tr",align:null},"Jump to prev")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null," ","<","leader",">","b[ ")),(0,a.kt)("td",{parentName:"tr",align:null},"Jump to prev")))))}p.isMDXComponent=!0}}]);