"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[7480],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6766:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},l="Projects",i={unversionedId:"modules/features/projects",id:"modules/features/projects",title:"Projects",description:"Adds the ability to switch from previously visited projects using telescope.",source:"@site/docs/modules/features/projects.md",sourceDirName:"modules/features",slug:"/modules/features/projects",permalink:"/docs/modules/features/projects",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Netrw",permalink:"/docs/modules/features/netrw"},next:{title:"Range Highlight",permalink:"/docs/modules/features/range_highlight"}},s={},c=[{value:"Settings",id:"settings",level:2},{value:"Plugins/Packages",id:"pluginspackages",level:2},{value:"Keybinds",id:"keybinds",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"projects"},"Projects"),(0,r.kt)("p",null,"Adds the ability to switch from previously visited projects using telescope.\nThis module depends upone the ",(0,r.kt)("inlineCode",{parentName:"p"},"features.telescope")," module."),(0,r.kt)("h2",{id:"settings"},"Settings"),(0,r.kt)("p",null,"Settings for the projects module."),(0,r.kt)("p",null,"You can access and override these values in your ",(0,r.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local projects_settings = doom.features.projects.settings\nprojects_settings.<field> = <new_value>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'projects.settings = {\n  -- Manual mode doesn\'t automatically change your root directory, so you have\n  -- the option to manually do so using `:ProjectRoot` command.\n  manual_mode = false,\n\n  -- Methods of detecting the root directory. **"lsp"** uses the native neovim\n  -- lsp, while **"pattern"** uses vim-rooter like glob pattern matching. Here\n  -- order matters: if one is not detected, the other is used as fallback. You\n  -- can also delete or rearangne the detection methods.\n  detection_methods = { "lsp", "pattern" },\n\n  -- All the patterns used to detect root dir, when **"pattern"** is in\n  -- detection_methods\n  patterns = { ".git", "_darcs", ".hg", ".bzr", ".svn", "Makefile", "package.json" },\n\n  -- Table of lsp clients to ignore by name\n  -- eg: { "efm", ... }\n  ignore_lsp = {},\n\n  -- Don\'t calculate root dir on specific directories\n  -- Ex: { "~/.cargo/*", ... }\n  exclude_dirs = {},\n\n  -- Show hidden files in telescope\n  show_hidden = false,\n\n  -- When set to false, you will get a message when project.nvim changes your\n  -- directory.\n  silent_chdir = true,\n\n  -- Path where project.nvim will store the project history for use in\n  -- telescope\n  datapath = vim.fn.stdpath("data"),\n}\n')),(0,r.kt)("h2",{id:"pluginspackages"},"Plugins/Packages"),(0,r.kt)("p",null,"Plugins for the ",(0,r.kt)("inlineCode",{parentName:"p"},"doom.features.annotations")," module."),(0,r.kt)("p",null,"These plugins will be passed into packer.nvim on startup.  You can tweak\nthe packer options by accessing these values in your ",(0,r.kt)("inlineCode",{parentName:"p"},"config.lua")," file.\ni.e.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local annotations_packages = doom.features.annotations.packages\nannotations_packages['neogen'].commit = '<my_new_commit_sha>'\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Source"),(0,r.kt)("th",{parentName:"tr",align:null},"Commit"),(0,r.kt)("th",{parentName:"tr",align:null},"Is Lazy?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null," neogen ")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/danymat/neogen"},"danymat/neogen")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/danymat/neogen/commit/967b280d7d7ade52d97d06e868ec4d9a0bc59282"},"d7d7ade52d97d06e868ec4d9a0bc59282")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"keybinds"},"Keybinds"),(0,r.kt)("p",null,"Override these keybinds in your config.lua:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local annotations = doom.features.annotations\nannotations.binds = {\n  { "<leader>prefix", "<cmd>echo \'my new keybind\'<CR>", name = "Description for my new keybind" }\n}\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Keymap"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null," ","<","leader",">","cg ")),(0,r.kt)("td",{parentName:"tr",align:null},"Generate annotations")))))}u.isMDXComponent=!0}}]);