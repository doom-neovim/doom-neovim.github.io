"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[9157],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return t?a.createElement(g,r(r({ref:n},u),{},{components:t})):a.createElement(g,r({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,r=new Array(s);r[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<s;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4498:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const s={},r="Bash",l={unversionedId:"modules/langs/bash",id:"modules/langs/bash",title:"Bash",description:"Adds bash language support to doom nvim.",source:"@site/docs/modules/langs/bash.md",sourceDirName:"modules/langs",slug:"/modules/langs/bash",permalink:"/docs/modules/langs/bash",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Zen",permalink:"/docs/modules/features/zen"},next:{title:"C",permalink:"/docs/modules/langs/c_sharp"}},i={},c=[{value:"Settings",id:"settings",level:2},{value:"Autocommands",id:"autocommands",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"bash"},"Bash"),(0,o.kt)("p",null,"Adds bash language support to doom nvim."),(0,o.kt)("h2",{id:"settings"},"Settings"),(0,o.kt)("p",null,"Settings for the bash module."),(0,o.kt)("p",null,"You can access and override these values in your ",(0,o.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local bash_settings = doom.langs.bash.settings\nbash_settings.<field> = <new_value>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'bash.settings = {\n  --- disables auto installing the treesitter\n  --- @type boolean\n  disable_treesitter = false,\n  --- treesitter grammars to install\n  --- @type string|string[]\n  treesitter_grammars = "bash",\n\n  --- disables default lsp config\n  --- @type boolean\n  disable_lsp = false,\n  --- name of the language server\n  --- @type string\n  lsp_name = "bashls",\n  --- Custom config to pass to nvim-lspconfig\n  --- @type table|nil\n  lsp_config = nil,\n\n  --- disables null-ls formatting sources\n  --- @type boolean\n  disable_formatting = false,\n  --- mason.nvim package to auto install the formatter from\n  --- @type string\n  formatting_package = "shfmt",\n  --- string to access the null_ls diagnositcs provider\n  --- @type string\n  formatting_provider = "builtins.formatting.shfmt",\n  --- function to configure null-ls formatter\n  --- @type function|nil\n  formatting_config = nil,\n\n  --- disables null-ls diagnostic sources\n  --- @type boolean\n  disable_diagnostics = false,\n  --- mason.nvim package to auto install the diagnostics provider from\n  --- @type string\n  diagnostics_package = "shellcheck",\n  --- string to access the null_ls diagnositcs provider\n  --- @type string\n  diagnostics_provider = "builtins.diagnostics.shellcheck",\n  --- function to configure null-ls diagnostics\n  --- @type function|nil\n  diagnostics_config = nil,\n\n  --- disables null-ls diagnostic sources\n  --- @type boolean\n  disable_code_actions = false,\n  --- mason.nvim package to auto install the code_actions provider from\n  --- @type string\n  code_actions_package = "shellcheck",\n  --- string to access the null_ls diagnositcs provider\n  --- @type string\n  code_actions_provider = "builtins.code_actions.shellcheck",\n  --- function to configure null-ls code_actions\n  --- @type function|nil\n  code_actions_config = nil,\n}\n\nlocal langs_utils = require("doom.modules.langs.utils")\n\n')),(0,o.kt)("h2",{id:"autocommands"},"Autocommands"),(0,o.kt)("p",null,"Autocommands for the ",(0,o.kt)("inlineCode",{parentName:"p"},"doom.langs.bash")," module."),(0,o.kt)("p",null,"Note: Plugins may create additional autocommands, these will be avaliable once\nthe plugin loads.  Please check the docs for these ",(0,o.kt)("a",{parentName:"p",href:"#plugins-packages"},"plugins"),"."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"pattern"),(0,o.kt)("th",{parentName:"tr",align:null},"Pattern"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"FileType"),(0,o.kt)("td",{parentName:"tr",align:null})))))}p.isMDXComponent=!0}}]);