"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[8172],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(t),g=i,m=p["".concat(s,".").concat(g)]||p[g]||u[g]||o;return t?a.createElement(m,l(l({ref:n},d),{},{components:t})):a.createElement(m,l({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=p;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},324:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const o={},l="Nix (NixOS)",r={unversionedId:"modules/langs/nix",id:"modules/langs/nix",title:"Nix (NixOS)",description:"Adds Nix (NixOS) language support to doom nvim.",source:"@site/docs/modules/langs/nix.md",sourceDirName:"modules/langs",slug:"/modules/langs/nix",permalink:"/docs/modules/langs/nix",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Markdown",permalink:"/docs/modules/langs/markdown"},next:{title:"OCaml",permalink:"/docs/modules/langs/ocaml"}},s={},c=[{value:"Settings",id:"settings",level:2},{value:"Autocommands",id:"autocommands",level:2}],d={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"nix-nixos"},"Nix (NixOS)"),(0,i.kt)("p",null,"Adds Nix (NixOS) language support to doom nvim."),(0,i.kt)("h2",{id:"settings"},"Settings"),(0,i.kt)("p",null,"Settings for the nix module."),(0,i.kt)("p",null,"You can access and override these values in your ",(0,i.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local nix_settings = doom.langs.nix.settings\nnix_settings.<field> = <new_value>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'nix.settings = {\n  --- Disables auto installing the treesitter\n  --- @type boolean\n  disable_treesitter = false,\n  --- Treesitter grammars to install\n  --- @type string|string[]\n  treesitter_grammars = "nix",\n\n  --- Disables default LSP config\n  --- @type boolean\n  disable_lsp = false,\n  --- Name of the language server\n  --- @type string\n  lsp_name = "rnix",\n  --- Custom config to pass to nvim-lspconfig\n  --- @type table|nil\n  lsp_config = nil,\n\n  --- Disables null-ls formatting sources\n  --- @type boolean\n  disable_formatting = false,\n  --- WARN: No package yet.  Mason.nvim package to auto install the formatter from\n  --- @type nil\n  formatting_package = nil,\n  --- String to access the null_ls diagnositcs provider\n  --- @type string\n  formatting_provider = "builtins.formatting.nixpkgs_fmt",\n  --- Function to configure null-ls formatter\n  --- @type function|nil\n  formatting_config = nil,\n\n  --- Disables null-ls diagnostic sources\n  --- @type boolean\n  disable_diagnostics = false,\n  --- WARN: No package yet.  Mason.nvim package to auto install the diagnostics provider from\n  --- @type nil\n  diagnostics_package = nil,\n  --- String to access the null_ls diagnositcs provider\n  --- @type string\n  diagnostics_provider = "builtins.diagnostics.statix",\n  --- Function to configure null-ls diagnostics\n  --- @type function|nil\n  diagnostics_config = nil,\n\n  --- disables null-ls diagnostic sources\n  --- @type boolean\n  disable_code_actions = false,\n  --- WARN: No package yet. mason.nvim package to auto install the code_actions provider from\n  --- @type string\n  code_actions_package = nil,\n  --- string to access the null_ls diagnositcs provider\n  --- @type string\n  code_actions_provider = "builtins.code_actions.statix",\n  --- function to configure null-ls code_actions\n  --- @type function|nil\n  code_actions_config = nil,\n\n  --- Disables null-ls dead code elimination sources\n  --- @type boolean\n  disable_dead_code_elim = false,\n  --- WARN: No package yet.  Mason.nvim package to auto install the dead_code_elim provider from\n  --- @type nil\n  dead_code_elim_package = nil,\n  --- String to access the null_ls dead code elimination provider\n  --- @type string\n  dead_code_elim_provider = "builtins.diagnostics.deadnix",\n  --- Function to configure null-ls dead code elimination\n  --- @type function|nil\n  dead_code_elim_config = nil,\n}\n\nlocal langs_utils = require("doom.modules.langs.utils")\n')),(0,i.kt)("h2",{id:"autocommands"},"Autocommands"),(0,i.kt)("p",null,"Autocommands for the ",(0,i.kt)("inlineCode",{parentName:"p"},"doom.langs.nix")," module."),(0,i.kt)("p",null,"Note: Plugins may create additional autocommands, these will be avaliable once\nthe plugin loads.  Please check the docs for these ",(0,i.kt)("a",{parentName:"p",href:"#plugins-packages"},"plugins"),"."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"pattern"),(0,i.kt)("th",{parentName:"tr",align:null},"Pattern"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"FileType"),(0,i.kt)("td",{parentName:"tr",align:null})))))}u.isMDXComponent=!0}}]);