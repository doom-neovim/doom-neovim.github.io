"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[2781],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9744:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={},a=void 0,s={unversionedId:"keymaps",id:"keymaps",title:"keymaps",description:"Extra options that will be passed to nvim when binding keymaps",source:"@site/docs/keymaps.md",sourceDirName:".",slug:"/keymaps",permalink:"/docs/keymaps",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/getting-started"},next:{title:"autocommands",permalink:"/docs/autocommands"}},l={},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Extra options that will be passed to nvim when binding keymaps\n@class NestSettingsOptions\n@field noremap boolean\n@field silent boolean\n@field expr boolean"),(0,i.kt)("p",null,"Stores the current keymap state/settings including lhs/prefix\n@class NestSettings\n@field buffer boolean|number\n@field prefix string\n@field options NestSettingsOptions\n@field mode string"),(0,i.kt)("p",null,"Internal type for a node in a nest.nvim config, this is how the end-user will define their config\n@class NestNode : NestSettings\n@field ","[1]"," string|table<number, NestNode>\n@field ","[2]"," string|function|table<number,NestNode>\n@field ","[3]"," string|nil Name\n@field name string|nil Name\n@field ","[4]"," string|nil Description\n@field description string|nil Description"),(0,i.kt)("p",null,"Type definition for nest.nvim integration\n@class NestIntegration\n@field name string\n@field on_init function|nil\n@field handler function\n@field on_complete function|nil"),(0,i.kt)("p",null,"Paramater passed to handler of NestIntegration\n@class NestIntegrationNode\n@field lhs string\n@field rhs table<number, NestNode>|string\n@field name string\n@field description string"),(0,i.kt)("p",null,"Defaults being applied to ",(0,i.kt)("inlineCode",{parentName:"p"},"applyKeymaps")),(0,i.kt)("p",null,"@type NestSettings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"                    `mergeSettings`({left}, {right})\n")),(0,i.kt)("p",null,"@param left NestSettings\n@param right NestSettings\n@return NestSettings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"                     `module.enable`({integration})\n")),(0,i.kt)("p",null,"@param integration NestIntegration"),(0,i.kt)("p",null,"Default nest integration that binds keymaps\n@type NestIntegration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"         `module.traverse`({node}, {settings}, {integrations})\n")),(0,i.kt)("p",null,"@param node NestNode\n@param settings NestSettings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    `module.applyKeymaps`({nest_config}, {settings}, {integrations})\n")),(0,i.kt)("p",null,"Applies the given ",(0,i.kt)("inlineCode",{parentName:"p"},"keymapConfig"),", creating nvim keymaps\n@param nest_config table<number, NestNode>\n@param settings NestSettings|nil\n@param integrations table<number, NestIntegration> User can parse the nest config with a subset of integrations"))}u.isMDXComponent=!0}}]);