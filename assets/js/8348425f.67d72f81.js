"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[1509],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=m(t),d=o,f=u["".concat(l,".").concat(d)]||u[d]||p[d]||a;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var m=2;m<a;m++)i[m]=t[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1033:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>m});var r=t(7462),o=(t(7294),t(3905));const a={},i=void 0,c={unversionedId:"autocommands",id:"autocommands",title:"autocommands",description:"AutoCommands Service,",source:"@site/docs/autocommands.md",sourceDirName:".",slug:"/autocommands",permalink:"/docs/autocommands",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"keymaps",permalink:"/docs/keymaps"},next:{title:"commands",permalink:"/docs/commands"}},l={},m=[],s={toc:m};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"AutoCommands Service,\nProvides functions to wrap neovims APIs to set and remove autocmds\nActs as a compatibility layer between different API versions.\nManages references to all commands to be cleared for :DoomReload"),(0,o.kt)("p",null,"@class AutoCommandArgs\n@field args string Args parsed to command (if any)\n@field fargs string[] Args split by unescaped whitespace (if any)\n@field line1 number Starting line of the command range\n@field line2 number Final line of the command range\n@field count number Any count supplied (if any)"),(0,o.kt)("p",null,"@class SetAutoCommandOptions\n@field nested boolean|nil\n@field once boolean|nil"),(0,o.kt)("p",null,"IMPLEMENTATIONS\nWraps the nvim functionality to handle different neovim versions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"      `autocmds_service.set`({event}, {pattern}, {action}, {opts})\n")),(0,o.kt)("p",null,"Set a neovim autocmd\n{event} ",(0,o.kt)("inlineCode",{parentName:"p"},"(string)")," Name of autocmd\n{pattern} ",(0,o.kt)("inlineCode",{parentName:"p"},"(string)")," Pattern to match autocommand with\n{action} ",(0,o.kt)("inlineCode",{parentName:"p"},"(string|function(AutoCommandArgs))"),"\n{opts} ",(0,o.kt)("inlineCode",{parentName:"p"},"(SetAutoCommandOptions|nil)"),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"number")," ID of autocommand, used to delete it later on"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"                      `autocmds_service.del`({id})\n")),(0,o.kt)("p",null,"Deletes an autocommand from a given id\n{id} ",(0,o.kt)("inlineCode",{parentName:"p"},"(number)")," ID of autocommand to delete"))}p.isMDXComponent=!0}}]);