"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[3643],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=l,g=m["".concat(s,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},369:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(7462),l=(n(7294),n(3905));const r={},o="Lua",i={unversionedId:"modules/langs/lua",id:"modules/langs/lua",title:"Lua",description:"Adds Lua language support to doom nvim.",source:"@site/docs/modules/langs/lua.md",sourceDirName:"modules/langs",slug:"/modules/langs/lua",permalink:"/docs/modules/langs/lua",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kotlin",permalink:"/docs/modules/langs/kotlin"},next:{title:"Markdown",permalink:"/docs/modules/langs/markdown"}},s={},u=[{value:"Settings",id:"settings",level:2},{value:"Plugins/Packages",id:"pluginspackages",level:2},{value:"Autocommands",id:"autocommands",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"lua"},"Lua"),(0,l.kt)("p",null,"Adds Lua language support to doom nvim."),(0,l.kt)("h2",{id:"settings"},"Settings"),(0,l.kt)("p",null,"Settings for the lua module."),(0,l.kt)("p",null,"You can access and override these values in your ",(0,l.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local lua_settings = doom.langs.lua.settings\nlua_settings.<field> = <new_value>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'lua.settings = {\n  --- Disables auto installing the treesitter\n  --- @type boolean\n  disable_treesitter = false,\n  --- Treesitter grammars to install\n  --- @type string|string[]\n  treesitter_grammars = "lua",\n\n  --- Disables default LSP config\n  --- @type boolean\n  disable_lsp = false,\n  --- Name of the language server\n  --- @type string\n  lsp_name = "sumneko_lua",\n  --- Custom config to pass to nvim-lspconfig\n  --- @type table|nil\n  lsp_config = {\n    formatter = {\n      enabled = true,\n    },\n    settings = {\n      Lua = {\n        runtime = {\n          version = "LuaJIT",\n        },\n        diagnostics = {\n          globals = { "vim", "doom" },\n        },\n        workspace = {\n          library = vim.api.nvim_get_runtime_file("", true),\n          maxPreload = 1000,\n          preloadFileSize = 150,\n          checkThirdParty = false,\n        },\n        telemetry = {\n          enable = false,\n        },\n      },\n    },\n  },\n\n  --- Disables null-ls formatting sources\n  --- @type boolean\n  disable_formatting = false,\n  --- Mason.nvim package to auto install the formatter from\n  --- @type string\n  formatting_package = "stylua",\n  --- String to access the null_ls diagnositcs provider\n  --- @type string\n  formatting_provider = "builtins.formatting.stylua",\n  --- Function to configure null-ls formatter\n  --- @type function|nil\n  formatting_config = nil,\n\n  --- Disables null-ls diagnostic sources\n  --- @type boolean\n  disable_diagnostics = false,\n  --- Mason.nvim package to auto install the diagnostics provider from\n  --- @type string\n  diagnostics_package = "luacheck",\n  --- String to access the null_ls diagnositcs provider\n  --- @type string\n  diagnostics_provider = "builtins.diagnostics.luacheck",\n  --- Function to configure null-ls diagnostics\n  --- @type function|nil\n  diagnostics_config = nil,\n\n  --- Config for the lua-dev plugin\n  lua_dev = {\n    library = {\n      vimruntime = true,\n      types = true,\n      plugins = true,\n    },\n  },\n}\n\n')),(0,l.kt)("h2",{id:"pluginspackages"},"Plugins/Packages"),(0,l.kt)("p",null,"Plugins for the ",(0,l.kt)("inlineCode",{parentName:"p"},"doom.langs.lua")," module."),(0,l.kt)("p",null,"These plugins will be passed into packer.nvim on startup.  You can tweak\nthe packer options by accessing these values in your ",(0,l.kt)("inlineCode",{parentName:"p"},"config.lua")," file.\ni.e.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local lua_packages = doom.langs.lua.packages\nlua_packages['lua-dev.nvim'].commit = '<my_new_commit_sha>'\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Source"),(0,l.kt)("th",{parentName:"tr",align:null},"Commit"),(0,l.kt)("th",{parentName:"tr",align:null},"Is Lazy?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null," lua-dev.nvim ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/folke/lua-dev.nvim"},"folke/lua-dev.nvim")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/folke/lua-dev.nvim/commit/f0da5bcc6ecddd121a67815a821cdb7452755e9e"},"c6ecddd121a67815a821cdb7452755e9e")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705")))),(0,l.kt)("h2",{id:"autocommands"},"Autocommands"),(0,l.kt)("p",null,"Autocommands for the ",(0,l.kt)("inlineCode",{parentName:"p"},"doom.langs.lua")," module."),(0,l.kt)("p",null,"Note: Plugins may create additional autocommands, these will be avaliable once\nthe plugin loads.  Please check the docs for these ",(0,l.kt)("a",{parentName:"p",href:"#plugins-packages"},"plugins"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"pattern"),(0,l.kt)("th",{parentName:"tr",align:null},"Pattern"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"FileType"),(0,l.kt)("td",{parentName:"tr",align:null})))))}p.isMDXComponent=!0}}]);