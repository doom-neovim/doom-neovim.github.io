"use strict";(self.webpackChunkdoom_neovim_github_io=self.webpackChunkdoom_neovim_github_io||[]).push([[7121],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},788:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},l="C/C++",i={unversionedId:"modules/langs/cc",id:"modules/langs/cc",title:"C/C++",description:"Adds C/C++ language support to doom nvim.",source:"@site/docs/modules/langs/cc.md",sourceDirName:"modules/langs",slug:"/modules/langs/cc",permalink:"/docs/modules/langs/cc",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C",permalink:"/docs/modules/langs/c_sharp"},next:{title:"CSS",permalink:"/docs/modules/langs/css"}},s={},c=[{value:"Settings",id:"settings",level:2},{value:"Autocommands",id:"autocommands",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cc"},"C/C++"),(0,r.kt)("p",null,"Adds C/C++ language support to doom nvim."),(0,r.kt)("h2",{id:"settings"},"Settings"),(0,r.kt)("p",null,"Settings for the cc module."),(0,r.kt)("p",null,"You can access and override these values in your ",(0,r.kt)("inlineCode",{parentName:"p"},"config.lua"),". I.e."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local cc_settings = doom.langs.cc.settings\ncc_settings.<field> = <new_value>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'cc.settings = {\n  --- disables auto installing the treesitter\n  --- @type boolean\n  disable_treesitter = false,\n  --- treesitter grammars to install\n  --- @type string|string[]\n  treesitter_grammars = { "c", "cpp" },\n\n  --- disables default lsp config\n  --- @type boolean\n  disable_lsp = false,\n  --- name of the language server\n  --- @type string\n  lsp_name = "clangd",\n  --- Custom config to pass to nvim-lspconfig\n  --- @type table|nil\n  lsp_config = {\n    capabilities = {\n      offsetEncoding = { "utf-16" },\n    },\n  },\n\n  --- disables null-ls formatting sources\n  --- @type boolean\n  disable_formatting = false,\n  ---Mason.nvim package to auto install the formatter from.\n  --- @type string\n  formatting_package = "clang-format",\n  --- string to access the null_ls diagnositcs provider\n  --- @type string\n  formatting_provider = "builtins.formatting.clang_format",\n  --- function to configure null-ls formatter\n  --- @type function|nil\n  formatting_config = nil,\n\n  --- disables null-ls diagnostic sources\n  --- @type boolean\n  disable_diagnostics = false,\n  --- mason.nvim package to auto install the diagnostics provider from\n  --- @type string\n  diagnostics_package = "cpplint",\n  --- string to access the null_ls diagnositcs provider\n  --- @type string\n  diagnostics_provider = "builtins.diagnostics.cpplint",\n  --- function to configure null-ls diagnostics\n  --- @type function|nil\n  diagnostics_config = nil,\n}\n\n')),(0,r.kt)("h2",{id:"autocommands"},"Autocommands"),(0,r.kt)("p",null,"Autocommands for the ",(0,r.kt)("inlineCode",{parentName:"p"},"doom.langs.cc")," module."),(0,r.kt)("p",null,"Note: Plugins may create additional autocommands, these will be avaliable once\nthe plugin loads.  Please check the docs for these ",(0,r.kt)("a",{parentName:"p",href:"#plugins-packages"},"plugins"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"pattern"),(0,r.kt)("th",{parentName:"tr",align:null},"Pattern"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FileType"),(0,r.kt)("td",{parentName:"tr",align:null})))))}u.isMDXComponent=!0}}]);